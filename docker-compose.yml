version: "3.8"

services:

  bootnode:
    image: ethereum/client-go:alltools-stable
    ports:
      - "30301:30301"
      - "30303:30303"
    command: [ "bootnode", "-nodekeyhex", "${NODE_PRIVATE}", "-verbosity", "5" ]

  node:
    image: ethereum/client-go:alltools-stable
    volumes:
      - ./node.sh:/node.sh:ro
      - ./genesis.json:/genesis.json:ro
      - ./data/node:/data
    ports:
      - "8545:8545"
    command: [ "sh", "/node.sh", "enode://${NODE_CONNECTION}@bootnode:0?discport=30301", "${NETWORK_ID}" ]

  tools:
    image: ethereum/client-go:alltools-stable
    volumes:
      - ./genesis.json:/genesis.json:ro
    command: [ "sh", "-c", "tail -f /dev/null" ]


  validator1:
    image: ethereum/client-go:alltools-stable
    volumes:
      - ./validator.sh:/validator.sh:ro
      - ./keystore/1_2d558F4633FF8011C27401c0070Fd1E981770B94.json:/data/keystore/1_2d558F4633FF8011C27401c0070Fd1E981770B94:ro
      - ./genesis.json:/genesis.json:ro
      - ./data/validator1:/data
    command: [ "sh", "/validator.sh", "${VALIDATOR_PUB_1}", "${VALIDATOR_PW_1}", "enode://${NODE_CONNECTION}@bootnode:0?discport=30301", "30310", "${NETWORK_ID}" ]

  validator2:
    image: ethereum/client-go:alltools-stable
    volumes:
      - ./validator.sh:/validator.sh:ro
      - ./keystore/2_66DFE79b64F64718430ffc468806FB3E13853651.json:/data/keystore/2_66DFE79b64F64718430ffc468806FB3E13853651:ro
      - ./genesis.json:/genesis.json:ro
      - ./data/validator2:/data
    command: [ "sh", "/validator.sh", "${VALIDATOR_PUB_2}", "${VALIDATOR_PW_2}", "enode://${NODE_CONNECTION}@bootnode:0?discport=30301", "30311", "${NETWORK_ID}" ]

  validator3:
    image: ethereum/client-go:alltools-stable
    volumes:
      - ./validator.sh:/validator.sh:ro
      - ./keystore/3_388C9150daea7e36560c6A22A88D6fE7d3749845.json:/data/keystore/3_388C9150daea7e36560c6A22A88D6fE7d3749845:ro
      - ./genesis.json:/genesis.json:ro
      - ./data/validator3:/data
    command: [ "sh", "/validator.sh", "${VALIDATOR_PUB_3}", "${VALIDATOR_PW_3}", "enode://${NODE_CONNECTION}@bootnode:0?discport=30301", 30312", "${NETWORK_ID}" ]

  db:
    image: postgres:14-alpine
    restart: always
    container_name: 'postgres'
    environment:
        POSTGRES_PASSWORD: ''
        POSTGRES_USER: 'postgres'
        POSTGRES_HOST_AUTH_METHOD: 'trust'
#    volumes:
#      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - 7432:5432

  blockscout:
    depends_on:
      - db
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    restart: always
    container_name: 'blockscout'
    links:
      - db:database
    command: 'mix do ecto.create, ecto.migrate, phx.server'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file:
      -  ./envs/common-blockscout.env
    environment:
        ETHEREUM_JSONRPC_VARIANT: 'geth'
        BLOCK_TRANSFORMER: 'clique'
        ETHEREUM_JSONRPC_HTTP_URL: 10.13.10.61:8545
        DATABASE_URL: postgresql://postgres:@db:5432/blockscout?ssl=false
        ECTO_USE_SSL: 'false'
    ports:
      - 4000:4000
